pipeline {
    agent any

    environment {
        AZURE_CREDENTIALS_ID = 'azure-credentials-id'  // Remplacez par votre ID de credentials Azure dans Jenkins
        AZURE_SUBSCRIPTION_ID = 'azure-subscription-id'  // Remplacez par votre ID de souscription Azure
        RESOURCE_GROUP = 'deploy-jenkins'  // Remplacez par le nom de votre groupe de ressources Azure
        ACR_NAME = 'deploy2jenkins'// Remplacez par le nom de votre Azure Container Registry
        ACR_PASSWORD = 'acr_password'
        ACR_USERNAME = 'acr_user'
        IMAGE_NAME = 'staticwebapp'  // Remplacez par le nom de votre image Docker
        IMAGE_TAG = 'latest'
        CONTAINER_GROUP_NAME = 'staticwebapp'  // Remplacez par le nom de votre groupe de conteneurs ACI
        CONTAINER_NAME = 'staticwebapp'  // Remplacez par le nom de votre conteneur ACI
    }

     stages {
stage('Install Azure CLI') {
            steps {
                script {
                    sh '''
                    sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
                    echo -e "[azure-cli]
name=Azure CLI
baseurl=https://packages.microsoft.com/yumrepos/azure-cli
enabled=1
gpgcheck=1
gpgkey=https://packages.microsoft.com/keys/microsoft.asc" | sudo tee /etc/yum.repos.d/azure-cli.repo
sudo yum install  -y azure-cli 
                    '''
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
dockerImage = docker.build("${ACR_NAME}.azurecr.io/${IMAGE_NAME}:${IMAGE_TAG}")
                }
            }
        }

        stage('Login to Azure') {
            steps {
                withCredentials([azureServicePrincipal(credentialsId: AZURE_CREDENTIALS_ID)]) {
                    sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID'
                    sh 'az account set --subscription $AZURE_SUBSCRIPTION_ID'
                    
                }
            }
        }

        stage('Push Docker Image to ACR') {
    steps {
        script {
        sh' az acr repository list --name $ACR_NAME --output table'
        //sh' docker login ${ACR_NAME}.azurecr.io -u $ACR_USERNAME -p $ACR_PASSWORD '
        sh' az acr login --name $ACR_NAME '
        sh ' docker build -t $ACR_NAME.azurecr.io/$IMAGE_NAME:$IMAGE_TAG . '

        sh' docker push ${ACR_NAME}.azurecr.io/${IMAGE_NAME}:${IMAGE_TAG}'
        sh' docker pull $ACR_NAME.azurecr.io/$IMAGE_NAME:$IMAGE_TAG '
            }
        }
    }



        stage('Deploy to ACI') {
            steps {
                script {
                  sh 'docker login -u jsp222 -p jPdGMrzlEoozN7BhEqd/19DcGc/hER11FEyKIfmwLK+ACRBWT3lW deploy2jenkins.azurecr.io '
                   sh' docker run -p 5555:80 -d --name webapp ${ACR_NAME}.azurecr.io/${IMAGE_NAME}:${IMAGE_TAG} '
                   //  sh' az acr login --name $ACR_NAME '
                 // sh' az container create --resource-group ${RESOURCE_GROUP} --registry-login-server ${ACR_NAME}.azurecr.io --registry-username ${ACR_USERNAME} --registry-password ${ACR_PASSWORD} --name ${IMAGE_NAME} --image ${ACR_NAME}.azurecr.io/${IMAGE_NAME}:${IMAGE_TAG} --dns-name-label ${CONTAINER_GROUP_NAME} --ports 80 '
                  }
                }
            }
       
        
         stage('Get ACI URL') {
            steps {
                script {
                    def dnsNameLabel = sh(script: "az container show --resource-group ${RESOURCE_GROUP} --name ${CONTAINER_NAME} --query 'ipAddress.fqdn' -o tsv", returnStdout: true).trim()
                    def url = "http://${dnsNameLabel}"
                    echo "Application URL: ${url}"
                    currentBuild.description = "<a href='${url}'>Application URL</a>"
                }
            }
        }
    }
 
        
    post {
        always {
            cleanWs()
        }
    }
}
