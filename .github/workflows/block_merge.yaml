name: Block Merge Without Shortcut Link

permissions:
  checks: write
on:
  pull_request_review:
    types: [submitted] 
  issue_comment:
    types: [created] # Triggers on adding a comment
concurrency:
  group: ${{ github.workflow }}-${{ github.event.issue.number }}
  cancel-in-progress: true
  
jobs:
  check-shortcut-link:
    runs-on: ubuntu-latest
    env:
      REPO: ${{ github.repository }}
      TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SHORTCUT_BOT_USERNAME: "BHYub"
      PR_NUMBER: ${{ github.event.issue.number }}
      EXCLUDED_AUTHOR: "github-actions[bot]"

    steps:
      - name: Get PR NUMBER if triggered on 'pull_request_review'
        if: github.event_name == 'pull_request_review'
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          echo "PR Number: $PR_NUMBER"
          echo "PR_NUMBER=${PR_NUMBER}" >> $GITHUB_ENV
      - name: Reset PR Checks
        run: |
          # Get the current HEAD of the PR branch
          PR_HEAD=$(curl -s -H "Authorization: token $TOKEN" \
          "https://api.github.com/repos/$REPO/pulls/$PR_NUMBER" \
          | jq -r .head.sha)
          
          # Get the PR branch name
          PR_BRANCH=$(curl -s -H "Authorization: token $TOKEN" \
          "https://api.github.com/repos/$REPO/pulls/$PR_NUMBER" \
          | jq -r .head.ref)

          echo "Using PR HEAD SHA: $PR_HEAD"
          # Create a new empty commit
          EMPTY_COMMIT=$(curl -s -X POST -H "Authorization: token $TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/$REPO/git/commits" \
          -d '{
           "message": "Reset checks",
           "tree": "$PR_HEAD",
           "parents": ["$PR_HEAD"]
          }' | jq -r .sha)
          echo "Created Empty Commit SHA: $EMPTY_COMMIT"


          # Update the reference of the PR branch
          curl -s -X PATCH -H "Authorization: token $TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/$REPO/git/refs/heads/$PR_BRANCH"\
          -d '{
          "sha": "'"$EMPTY_COMMIT"'",
          "force": true
          }'

          echo "PR checks have been reset."      
          echo "PR_SHA=$EMPTY_COMMIT" >> $GITHUB_ENV
 
      - name: Get PR Details
        id: get_pr_details
        run: |
          PR_DETAILS=$(curl -s -H "Authorization: token $TOKEN" \
            "https://api.github.com/repos/$REPO/pulls/$PR_NUMBER")
          PR_AUTHOR=$(echo "$PR_DETAILS" | jq -r .user.login)   # Get the author of the PR
          
          echo "PR Author: $PR_AUTHOR"
          echo "pr_author=$PR_AUTHOR" >> $GITHUB_OUTPUT
         
      - name: Get Comments and Verify Comment
        id: get_comments_and_verify
        run: |
          COMMENTS=""
          PAGE=1
          PER_PAGE=100 # We can set max comments per page to 100.
          
          # Bypassing the check for specific author .
          
          if [[ "${{ steps.get_pr_details.outputs.pr_author }}" == "${{ env.EXCLUDED_AUTHOR }}" ]]; then
            echo "Skipping check for excluded author."
            echo "status=success" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Pagination Logic : a loop that retrieves all comments across multiple pages.
          while :; do
            RESPONSE=$(curl -s -H "Authorization: token $TOKEN" \
              "https://api.github.com/repos/$REPO/issues/$PR_NUMBER/comments?per_page=$PER_PAGE&page=$PAGE")

            # Break if no more comments are returned
            if [[ $(echo "$RESPONSE" | jq '. | length') -eq 0 ]]; then
              break
            fi

            COMMENTS+="$RESPONSE"
            ((PAGE++))
          done
          
          # Testing if the shortcut bot comment is present. 
          if echo "$COMMENTS" | jq -e ".[] | select(.user.login == \"$SHORTCUT_BOT_USERNAME\") | select(.body | contains(\"This pull request has been linked to\"))" > /dev/null; then
            echo "Valid Shortcut link found."
            echo "status=success" >> $GITHUB_OUTPUT
            
          else
            echo "This PR does not have a linked Shortcut story."
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
      - name: Create Check Run
        run: |
          CHECK_RUN_CREATE_URL="https://api.github.com/repos/${REPO}/check-runs"
          curl -X POST \
            -H "Authorization: token $TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "$CHECK_RUN_CREATE_URL" \
            -d '{
              "name": "check-shortcut-link",
              "head_sha": "'"${PR_SHA}"'",
              "status": "completed",
              "conclusion": "'"${{ steps.get_comments_and_verify.outputs.status }}"'",
              "output": {
                "title": "'"${{ github.workflow }}"'",
                "summary": "'"${{ steps.get_comments_and_verify.outputs.status }}"' for this PR."
              }
            }'
          # Exit with failure if status is failure
          if [[ "${{ steps.get_comments_and_verify.outputs.status }}" == 'failure' ]]; then
            echo "This PR does not have a linked Shortcut story."
            exit 1
          fi
